@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject EnvironmentVariableService someClass

<PageTitle>Home</PageTitle>

<h1>Hello, frontend!</h1>

Welcome to your new app.
<p>current conStr: @conn</p>
<p>current env: @env</p>
<p>current proj: @proj</p>
<p>current url: @url</p>

<button @onclick="(() => ToggleComments())" style="padding: 0; border: none;border-top: 2px black dashed;height: auto; width: 100%; background-color: rgb(228, 228, 228, 1);">
	<b>Comments</b>
</button>
<div class="@commentsClass">
	<div>
		<div>some comment</div>
		<div>another comment</div>
	</div>
</div>
<div>comment below</div>
<div>another comment below</div>

<style>
	/* WITH GRID */
	.comments {
		display: grid;
		grid-template-rows: 0fr;
		transition: grid-template-rows .5s;
	}

		.comments > div {
			overflow: hidden;
		}

	.show, button:hover ~ .comments {
		grid-template-rows: 1fr;
	}

	/* WITHOUT GRID */
	/*
		.comment {
			background-color: red;
			height: 0;
			transition: all .3s ease;
			transform: scaleY(0);
			opacity: 0;
			visibility: hidden;
			margin-bottom: 0;
			translate: 0 -50%;
		}

		.show {
			opacity: 1;
			visibility: visible;
			margin-bottom: 0%;
			height: 100%;
			transform: scaleY(1);
			translate: 0 0%;
		}
		*/
</style>

@code
{
	private string commentsClass = "comments";

	private void ToggleComments()
	{
		if (commentsClass == "comments show")
		{
			commentsClass = "comments";
		}
		else
		{
			commentsClass = "comments show";
		}
	}

	public string conn = "empty";
	public string env = "empty";
	public string proj = "empty";
	public string url = "empty";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;

		await Task.Delay(500);
		conn = someClass.GetConnStr();
		env = someClass.GetEnvVar();
		proj = someClass.GetProj();
		url = someClass.GetApiUrl();

		StateHasChanged();
	}
	/*protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		conn = someClass.GetConnStr();
		env = someClass.GetEnvVar();
	}*/

	/*
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
	if (!firstRender) return;

	await Task.Delay(500);
	projects = await PortfolioService.GetAllProjectsAsync();
	StateHasChanged();
	}
	*/
}