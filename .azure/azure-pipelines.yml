# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# variables: # -> no need when terraforming in release?
# - group: tempvariablegroupname # -> no need when terraforming in release?

# #parameters you need to change -> no need when terraforming in release?
# parameters:
# - name: AzureSubId # change to your azure subscription and subscription id 
#   default: Azure Resource Manager # tempsubscriptionid
# - name: ApiAppName # change to your azure api name
#   default: $(apiappname) # tempapiappname
# - name: WebAppName # change to your azure web app name
#   default: $(webappname) # tempwebappname

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/t:myblazor /t:myapi /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: CopyFiles@2
  inputs:
    SourceFolder: '.terraform'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/terraform'

- task: CopyFiles@2
  inputs:
    SourceFolder: 'scripts'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/scripts'

- task: PublishBuildArtifacts@1

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'terraform'
#     publishLocation: 'Container'
#

# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your PowerShell commands here.
#       az config set extension.use_dynamic_install=yes_without_prompt
#       echo $(System.AccessToken) | az devops login

#inline script
#az config set extension.use_dynamic_install=yes_without_prompt
#echo $(System.AccessToken) | az devops login
#az login --service-principal -u 6cb8d31e-87f0-443c-abc6-66a8ae0a9763 -p 2b38Q~7FdKjSYscZMg-ib3aAABJKga~YqUAN_cYw --tenant ec481362-ae50-4bfb-8524-b7c76d7b4cd8

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'Azure Resource Manager'
#     scriptType: 'ps'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       echo "67dzamihd3eaaul7x2zvyclkhowf6lnf6gm3o3bbqrrekme7n42q" | az devops login --organization https://dev.azure.com/jonasdamsbo/

# - task: TerraformInstaller@1
#   inputs:
#     terraformVersion: 'latest'

# - task: TerraformTaskV4@4
#   displayName: 'Terraform: Init'
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     workingDirectory: '$(build.artifactstagingdirectory)/terraform'
#     backendServiceArm: '${{ parameters.AzureSubId }}'
#     backendAzureRmResourceGroupName: 'tempresourcenameResourcegroup'
#     backendAzureRmStorageAccountName: 'tempstorageaccount'
#     backendAzureRmContainerName: 'tempterraformcontainername'
#     backendAzureRmKey: 'terraform.tfstate'

# - task: TerraformTaskV4@4
#   displayName: 'Terraform: Plan'
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     workingDirectory: '$(build.artifactstagingdirectory)/terraform'
#     environmentServiceNameAzureRM: '${{ parameters.AzureSubId }}'
#   # env:
#   #   AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
#   #   SYSTEM_ACCESSTOKEN: $(System.AccessToken)

# - task: TerraformTaskV4@4
#   displayName: 'Terraform: Validate'
#   inputs:
#     provider: 'azurerm'
#     command: 'validate'
#     workingDirectory: '$(build.artifactstagingdirectory)/terraform'

# - task: TerraformTaskV4@4
#   displayName: 'Terraform: Apply'
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     workingDirectory: '$(build.artifactstagingdirectory)/terraform'
#     commandOptions: '-auto-approve'
#     environmentServiceNameAzureRM: '${{ parameters.AzureSubId }}'

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: '${{ parameters.AzureSubId }}'
#     scriptType: 'ps'
#     scriptLocation: 'scriptPath'
#     scriptPath: 'scripts/setcloudvars.ps1'

# #Deploy web app
# - task: AzureRmWebAppDeployment@4
#   displayName: 'Deploy Azure web app'
#   inputs:
#     ConnectionType: 'AzureRM'
#     azureSubscription: '${{ parameters.AzureSubId }}'
#     #azureSubscription: 'testsubscription (8e4e96ed-7549-4b0c-9bd9-edbeed4c2f77)'
#     appType: 'webApp'
#     WebAppName: '${{ parameters.WebAppName }}'
#     packageForLinux: 'D:\a\1\a\myblazor.zip'
#     #D:\a\1\s\**\myblazor.zip
#     #packageForLinux: '$(System.DefaultWorkingDirectory)/**/myblazor.zip'

# #Deploy api app
# - task: AzureRmWebAppDeployment@4
#   displayName: 'Deploy Azure api app'
#   inputs:
#     ConnectionType: 'AzureRM'
#     azureSubscription: '${{ parameters.AzureSubId }}'
#     appType: 'apiApp'
#     WebAppName: '${{ parameters.ApiAppName }}'
#     packageForLinux: 'D:\a\1\a\myapi.zip'
