@page "/edit-project"
@page "/edit-project/{Id:int}"
@inject IPortfolioService PortfolioService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if(Id is null)
{
	<PageTitle>Add a new project</PageTitle>
	<h3>Add a new project</h3>
}
else
{
	<PageTitle>Edit: "@CurrentProject.Title"</PageTitle>
	<h3>Edit: "@CurrentProject.Title"</h3>
}

<EditForm Model="CurrentProject" OnSubmit="HandleSubmit">
	<div>
		<label for="title">Title</label>
		<InputText id="title" @bind-Value="CurrentProject.Title" class="form-control" />
	</div>
	<div>
		<label for="description">Description</label>
		<InputText id="description" @bind-Value="CurrentProject.Description" class="form-control" />
	</div>
	<div>
		<label for="weburl">WebUrl</label>
		<InputText id="weburl" @bind-Value="CurrentProject.WebUrl" class="form-control" />
	</div>
	<button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code
{
	[Parameter]
	public int? Id { get; set; }

	public PortfolioProject CurrentProject { get; set; } = new();

	protected override async Task OnParametersSetAsync()
	{
		if(Id is not null)
		{
			var project = await PortfolioService.GetProjectByIdAsync((int)Id);

			if(project is not null)
			{
				CurrentProject = project;
			}
		}
	}

	async Task HandleSubmit()
	{
		if(Id is not null)
		{
			// Update
			await PortfolioService.UpdateProjectAsync(CurrentProject, (int)Id);
			NavigationManager.NavigateTo("/portfolio");
		}
		else
		{
			// Add
			await PortfolioService.AddProjectAsync(CurrentProject);
			NavigationManager.NavigateTo("/portfolio");
		}
	}
}
