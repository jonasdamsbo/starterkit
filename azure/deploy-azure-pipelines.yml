# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger: none
#- main  # Adjust the branch as needed
resources:
  pipelines:
    - pipeline: BuildPipeline  # Logical name to reference this pipeline
      source: Build # Build jgde2ex # tempresourcename   # Actual name of the build pipeline in Azure DevOps
      branch: master           # Branch to monitor for the build pipeline completion
      trigger:
        branches:
          include:
            - master           # Trigger this pipeline when a build from the master branch completes

pool:
  vmImage: 'windows-latest'

# select specific build id
# parameters:
#   - name: buildId
#     displayName: "Select Build ID"
#     type: string
#     default: 'REQUIRED'  # Empty by default (uses latest build if not provided)

variables:
- group: myvariablegroup # jgde2exvariablegroup # tempresourcenamevariablegroup
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: webappName # Reference library variable 'resourcename' and append 'webapp'
  value: "$(resourcename)webapp"
- name: apiappName # Reference library variable 'resourcename' and append 'webapp'
  value: "$(resourcename)apiapp"
- name: resourcegroupName
  value: "$(resourcename)resourcegroup" # "jgdtestresourcegroup"
- name: storageaccountName
  value: "$(resourcename)storageaccount" # "jgdteststorageaccount"
- name: azureServiceSubscription
  value: "$(azureserviceconnectionname)" # "Azure Resource Manager" # name of app registration with federated identity, will be create if you create an azure devops service connection
- name: artifactPath
  value: "$(Pipeline.Workspace)/BuildPipeline/drop" # $(Pipeline.Workspace)/BuildPipeline/drop
- name: thestoragekey
  value: "$(storagekey)" # $(Pipeline.Workspace)/BuildPipeline/drop
# - name: terraformcontainerName
#   value: "$(terraformcontainer)"
# - name: terraformkey
#   value: "$(terraformkey)"
- name: sqlserverName # for dbbackup v
  value: "$(resourcename)mssqlserver" # "jgdtestmssqlserver"
- name: sqldatabaseName
  value: "$(resourcename)mssqldatabase" # "jgdtestmssqldatabase"
- name: sqlusername
  value: "$(resourcename)"
- name: thesqlpassword
  value: "$(sqlpassword)"
- name: backupcontainerName
  value: "$(backupcontainer)"
# - name: selectedBuildId # for manual trigger
#   value: ${{ parameters.buildId }}
# - name: theprojectname
#   value: "$(projectname)"

stages:
- stage: Terraformanddeploy
  displayName: Terraform cloud stage
  jobs:

  - deployment: Review
    displayName: Review job
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
            - script: echo "Deployment started!"

  - job: BackupdbJob
    displayName: Dbbackup job
    steps:
    
    # Download the artifact from the build pipeline
    - download: BuildPipeline  # Reference to the build pipeline artifact
      artifact: drop           # Replace 'drop' with your artifact name if it's different

    # download based on specific build id
    # - task: DownloadPipelineArtifact@2
    #   inputs:
    #     source: specific
    #     project: "$(theprojectname)"
    #     pipeline: Build
    #     runVersion: specific
    #     runId: ${{ coalesce(parameters.buildId, resources.pipeline.BuildPipeline.runID) }}
    #     artifact: drop
    #     path: $(Pipeline.Workspace)/drop

    - task: AzureCLI@2
      displayName: 'Temporarily Disable Firewall'
      inputs:
        azureSubscription: "$(azureServiceSubscription)"
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $resourceGroup = "$(resourcegroupName)"
          $serverName = "$(sqlserverName)"
          $databaseName = "$(sqldatabaseName)"
          $sqlname = "$(sqlusername)"
          $sqlpass = "$(thesqlpassword)"
          $storageAccount = "$(storageaccountName)"
          $containerName = "$(backupcontainerName)"
          $storageKey = az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query "[0].value" -o tsv
          $storageUri = "https://${storageAccount}.blob.core.windows.net/${containerName}/backup-${databaseName}-$(Get-Date -Format yyyyMMddHHmmss).bacpac"

          # Check if the database exists
          $dbExists = az sql db show `
            --resource-group $resourceGroup `
            --server $serverName `
            --name $databaseName `
            --query "name" -o tsv

          if (-not $dbExists) {
            Write-Output "Database '$databaseName' does not exist. Skipping export."
            exit 0
          }
          Write-Output "Database '$databaseName' exists. Proceeding with export."

          az sql server firewall-rule create `
            --resource-group "$(resourcegroupName)" `
            --server "$(sqlserverName)" `
            --name AllowAllWindowsAzureIps `
            --start-ip-address 0.0.0.0 `
            --end-ip-address 0.0.0.0
          Start-Sleep -Seconds 5

    - task: AzureCLI@2
      displayName: 'Export Database to Azure Storage'
      inputs:
        azureSubscription: "$(azureServiceSubscription)"
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $resourceGroup = "$(resourcegroupName)"
          $serverName = "$(sqlserverName)"
          $databaseName = "$(sqldatabaseName)"
          $sqlname = "$(sqlusername)"
          $sqlpass = "$(sqlpassword)"
          $storageAccount = "$(storageaccountName)"
          $containerName = "$(backupcontainerName)"
          $storageKey = az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query "[0].value" -o tsv
          $storageUri = "https://${storageAccount}.blob.core.windows.net/${containerName}/backup-${databaseName}-$(Get-Date -Format yyyyMMddHHmmss).bacpac"

          # Check if the database exists
          $dbExists = az sql db show `
            --resource-group $resourceGroup `
            --server $serverName `
            --name $databaseName `
            --query "name" -o tsv

          if (-not $dbExists) {
            Write-Output "Database '$databaseName' does not exist. Skipping export."
            exit 0
          }
          Write-Output "Database '$databaseName' exists. Proceeding with export."

          # Initiate the export
          az sql db export `
            --admin-user $sqlname `
            --admin-password $sqlpass `
            --name $databaseName `
            --resource-group $resourceGroup `
            --server $serverName `
            --storage-key $storageKey `
            --storage-key-type StorageAccessKey `
            --storage-uri $storageUri

    - task: AzureCLI@2
      displayName: 'Enable Firewall Again'
      inputs:
        azureSubscription: "$(azureServiceSubscription)"
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $resourceGroup = "$(resourcegroupName)"
          $serverName = "$(sqlserverName)"
          $databaseName = "$(sqldatabaseName)"
          $sqlname = "$(sqlusername)"
          $sqlpass = "$(sqlpassword)"
          $storageAccount = "$(storageaccountName)"
          $containerName = "$(backupcontainerName)"
          $storageKey = az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query "[0].value" -o tsv
          $storageUri = "https://${storageAccount}.blob.core.windows.net/${containerName}/backup-${databaseName}-$(Get-Date -Format yyyyMMddHHmmss).bacpac"

          # Check if the database exists
          $dbExists = az sql db show `
            --resource-group $resourceGroup `
            --server $serverName `
            --name $databaseName `
            --query "name" -o tsv

          if (-not $dbExists) {
            Write-Output "Database '$databaseName' does not exist. Skipping export."
            exit 0
          }
          Write-Output "Database '$databaseName' exists. Proceeding with export."
          
          Start-Sleep -Seconds 5
          az sql server firewall-rule delete `
            --resource-group "$(resourcegroupName)" `
            --server "$(sqlserverName)" `
            --name AllowAllWindowsAzureIps

    - task: AzureCLI@2
      displayName: 'Verify Export'
      inputs:
        azureSubscription: "$(azureServiceSubscription)" #'your-azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking exported file in Azure Storage"
          az storage blob list --account-name "$(storageaccountName)" --container-name "$(backupcontainerName)" --output table

  - job: TerraformJob
    displayName: replacetokens terraform setcloudvars job
    dependsOn: BackupdbJob
    steps:
    
    # Download the artifact from the build pipeline
    - download: BuildPipeline  # Reference to the build pipeline artifact
      artifact: drop           # Replace 'drop' with your artifact name if it's different

    - task: AzureCLI@2
      displayName: "Azure CLI $(artifactPath)/scripts/replacetokens.ps1"
      inputs:
        azureSubscription: "$(azureServiceSubscription)"
        scriptType: 'ps'
        scriptLocation: 'scriptPath'
        scriptPath: "$(artifactPath)/scripts/replacetokens.ps1"
        arguments: "-filePath '$(artifactPath)'"

    - task: PowerShell@2
      displayName:  "Verify main.tf after ReplaceTokens"
      inputs:
        targetType: 'inline'
        script: |
          Get-Content -Path '$(artifactPath)/terraform/main.tf'
          
    # - task: PowerShell@2
    #   displayName: "Clean Terraform cache"
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       Remove-Item -Recurse -Force '$(artifactPath)/terraform/.terraform' -ErrorAction SilentlyContinue

    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    
    - task: TerraformTaskV4@4
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(artifactPath)/terraform'
        backendAzureRmUseEnvironmentVariablesForAuthentication: false
        backendAzureRmUseEntraIdForAuthentication: false
        backendServiceArm: $(azureServiceSubscription)
        backendAzureRmResourceGroupName: $(resourcegroupName)
        backendAzureRmStorageAccountName: $(storageaccountName)
        backendAzureRmContainerName: 'terraform' # $(terraformcontainerName)
        backendAzureRmKey: 'terraform.tfstate' # $(terraformkey)
    
    # - task: TerraformTaskV4@4
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     workingDirectory: '$(artifactPath)/terraform'
    #     backendServiceArm: 'Azure Resource Manager'
    #     backendAzureRmResourceGroupName: 'jgdtestresourcegroup'
    #     backendAzureRmStorageAccountName: 'jgdteststorageaccount'
    #     backendAzureRmContainerName: 'terraform'
    #     backendAzureRmKey: 'terraform.tfstate'
    
      
    - task: TerraformTaskV4@4
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: "$(artifactPath)/terraform"

    - task: TerraformTaskV4@4
      displayName: 'Terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: "$(artifactPath)/terraform"
        environmentServiceNameAzureRM: "$(azureServiceSubscription)"

    - task: TerraformTaskV4@4
      displayName: 'Terraform : azurerm'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: "$(artifactPath)/terraform"
        environmentServiceNameAzureRM: "$(azureServiceSubscription)"

    - task: AzureCLI@2
      displayName: "Azure CLI $(System.DefaultWorkingDirectory)/_Build $(resourcename)/drop/scripts/setcloudvars.ps1"
      inputs:
        azureSubscription: "$(azureServiceSubscription)"
        scriptType: 'ps'
        scriptLocation: 'scriptPath'
        scriptPath: "$(artifactPath)/scripts/setcloudvars.ps1"


  - job: MigrateJob
    displayName: Migrate sqldb from api models with efcore
    dependsOn: TerraformJob
    steps:

    # Download the artifact from the build pipeline
    - download: BuildPipeline  # Reference to the build pipeline artifact
      artifact: drop           # Replace 'drop' with your artifact name if it's different

    - task: AzureCLI@2
      displayName: 'Temporarily Disable Firewall'
      inputs:
        azureSubscription: "$(azureServiceSubscription)"
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $resourceGroup = "$(resourcegroupName)"
          $serverName = "$(sqlserverName)"
          $databaseName = "$(sqldatabaseName)"
          $sqlname = "$(sqlusername)"
          $sqlpass = "$(thesqlpassword)"
          $storageAccount = "$(storageaccountName)"
          $containerName = "$(backupcontainerName)"
          $storageKey = az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query "[0].value" -o tsv
          $storageUri = "https://${storageAccount}.blob.core.windows.net/${containerName}/backup-${databaseName}-$(Get-Date -Format yyyyMMddHHmmss).bacpac"

          # Check if the database exists
          $dbExists = az sql db show `
            --resource-group $resourceGroup `
            --server $serverName `
            --name $databaseName `
            --query "name" -o tsv

          if (-not $dbExists) {
            Write-Output "Database '$databaseName' does not exist. Skipping disable firewall"
            exit 0
          }
          Write-Output "Database '$databaseName' exists. Proceeding with disabling firewall."

          $ip = Invoke-RestMethod -Uri 'https://api.ipify.org?format=json';
          az sql server firewall-rule create `
            --resource-group "$(resourcegroupName)" `
            --server "$(sqlserverName)" `
            --name AllowDevopsAgentIp `
            --start-ip-address $ip.ip `
            --end-ip-address $ip.ip

          Start-Sleep -Seconds 5

    - task: AzureCLI@2
      displayName: Apply EF Core Migration Script to Azure SQL
      inputs:
        azureSubscription: "$(azureServiceSubscription)"
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $serverName = "$(sqlserverName).database.windows.net"
          $databaseName = "$(sqldatabaseName)"
          $username = "$(sqlusername)"
          $password = "$(thesqlpassword)"
          $sqlScriptPath = "$(Pipeline.Workspace)\BuildPipeline\drop\migrationscript\migrationscript.sql"

          # Run sqlcmd to execute the migration script
          sqlcmd -S "tcp:$serverName,1433" -d $databaseName -U $username -P "$password" -i "$sqlScriptPath"

    - task: AzureCLI@2
      displayName: 'Enable Firewall Again'
      inputs:
        azureSubscription: "$(azureServiceSubscription)"
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $resourceGroup = "$(resourcegroupName)"
          $serverName = "$(sqlserverName)"
          $databaseName = "$(sqldatabaseName)"
          $sqlname = "$(sqlusername)"
          $sqlpass = "$(sqlpassword)"
          $storageAccount = "$(storageaccountName)"
          $containerName = "$(backupcontainerName)"
          $storageKey = az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query "[0].value" -o tsv
          $storageUri = "https://${storageAccount}.blob.core.windows.net/${containerName}/backup-${databaseName}-$(Get-Date -Format yyyyMMddHHmmss).bacpac"

          # Check if the database exists
          $dbExists = az sql db show `
            --resource-group $resourceGroup `
            --server $serverName `
            --name $databaseName `
            --query "name" -o tsv

          if (-not $dbExists) {
            Write-Output "Database '$databaseName' does not exist. Skipping enable firewall."
            exit 0
          }
          Write-Output "Database '$databaseName' exists. Proceeding with enabling firewall."
          
          Start-Sleep -Seconds 5

          az sql server firewall-rule delete `
            --resource-group "$(resourcegroupName)" `
            --server "$(sqlserverName)" `
            --name AllowDevopsAgentIp


  - job: DeployJob
    displayName: Deploy to Azure App Service job
    dependsOn: TerraformJob
    steps:

    # Download the artifact from the build pipeline
    - download: BuildPipeline  # Reference to the build pipeline artifact
      artifact: drop           # Replace 'drop' with your artifact name if it's different
      
    # Deploy the artifact (myblazor.zip) to Azure App Service
    # - task: AzureWebApp@1
    #   inputs:
    #     azureSubscription: "$(azureServiceSubscription)"  # Azure service connection name
    #     appName: "$(webappName)"                   # Name of your App Service
    #     package: "$(artifactPath)/myblazor.zip"  # Path to the ZIP file
    #     deploymentMethod: 'auto'  # Let Azure determine the best deployment method (zip deploy, etc.)
    #     appType: 'webApp'         # Set app type to 'webApp' for a standard web app deployment
    #   displayName: 'Deploy web to Azure App Service'
      
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy web to Azure App Service'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: "$(azureServiceSubscription)"  # Azure service connection name
        appType: 'webApp'
        WebAppName: '$(webappName)'
        packageForLinux: '$(artifactPath)/myblazor.zip'

    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy api to Azure App Service'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: "$(azureServiceSubscription)"  # Azure service connection name
        appType: 'webApp'
        WebAppName: '$(apiappName)'
        packageForLinux: '$(artifactPath)/myapi.zip'

    # - task: AzureWebApp@1
    #   inputs:
    #     azureSubscription: "$(azureServiceSubscription)"  # Azure service connection name
    #     appName: "$(apiappName)"                   # Name of your App Service
    #     package: "$(artifactPath)/myapi.zip"  # Path to the ZIP file
    #     deploymentMethod: 'auto'  # Let Azure determine the best deployment method (zip deploy, etc.)
    #     appType: 'webApp'         # Set app type to 'webApp' for a standard web app deployment
    #   displayName: 'Deploy api to Azure App Service'